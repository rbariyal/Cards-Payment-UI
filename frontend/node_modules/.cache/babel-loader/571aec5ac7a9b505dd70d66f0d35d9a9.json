{"ast":null,"code":"import moment from \"moment\";\nexport function stripeCardNumberValidation(cardNumber) {\n  cardNumber.replace(/[^\\d]/g, \"\");\n  if (cardNumber) {\n    return cardNumber && /^[1-6]{1}[0-9]{14,15}$/i.test(cardNumber.replace(/[^\\d]/g, \"\").trim()) ? \"\" : \"Enter a valid Card\";\n  }\n  return \"Enter a valid Card\";\n}\nexport const stripeCardExpirValidation = value => {\n  if (value) {\n    if (/^(0[1-9]|1[0-2])\\/[0-9]{2}$/i.test(value.trim())) {\n      let today = new Date();\n      let CurrentDate = moment(new Date(today.getFullYear() + \"-\" + (today.getMonth() + 1) + \"-\" + new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate()));\n      let visaValue = value.split(\"/\");\n      let visaDate = new Date(`20${visaValue[1]}`, visaValue[0], 0);\n      return CurrentDate < moment(visaDate) ? undefined : \"Please enter valid date\";\n    } else {\n      return \"Invalid date format\";\n    }\n  }\n};\nexport const textWithSpacesOnly = value => {\n  if (value) {\n    if (/^[a-zA-Z ]*$/i.test(value)) {\n      return undefined;\n    } else {\n      return \"Only alphabets\";\n    }\n  } else {\n    return undefined;\n  }\n};","map":{"version":3,"names":["moment","stripeCardNumberValidation","cardNumber","replace","test","trim","stripeCardExpirValidation","value","today","Date","CurrentDate","getFullYear","getMonth","getDate","visaValue","split","visaDate","undefined","textWithSpacesOnly"],"sources":["C:/Users/arora/OneDrive/Desktop/React/frontend/src/validations.jsx"],"sourcesContent":["import moment from \"moment\";\r\n\r\n\r\nexport function stripeCardNumberValidation(cardNumber) {\r\n    cardNumber.replace(/[^\\d]/g, \"\")\r\n        if(cardNumber) {\r\n          return cardNumber &&\r\n            /^[1-6]{1}[0-9]{14,15}$/i.test(\r\n              cardNumber.replace(/[^\\d]/g, \"\").trim()\r\n            )\r\n            ? \"\"\r\n            : \"Enter a valid Card\";\r\n        }\r\n      \r\n    \r\n    return \"Enter a valid Card\";\r\n  }\r\n  \r\n\r\nexport const stripeCardExpirValidation = (value) => {\r\n  if (value) {\r\n    if (/^(0[1-9]|1[0-2])\\/[0-9]{2}$/i.test(value.trim())) {\r\n      let today = new Date();\r\n      let CurrentDate = moment(\r\n        new Date(\r\n          today.getFullYear() +\r\n            \"-\" +\r\n            (today.getMonth() + 1) +\r\n            \"-\" +\r\n            new Date(today.getFullYear(), today.getMonth() + 1, 0).getDate()\r\n        )\r\n      );\r\n      let visaValue = value.split(\"/\");\r\n      let visaDate = new Date(`20${visaValue[1]}`, visaValue[0], 0);\r\n      return CurrentDate < moment(visaDate)\r\n        ? undefined\r\n        : \"Please enter valid date\";\r\n    } else {\r\n      return \"Invalid date format\";\r\n    }\r\n  }\r\n};\r\n\r\nexport const textWithSpacesOnly = (value) => {\r\n  if (value) {\r\n    if (/^[a-zA-Z ]*$/i.test(value)) {\r\n      return undefined;\r\n    } else {\r\n      return \"Only alphabets\";\r\n    }\r\n  } else {\r\n    return undefined;\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAG3B,OAAO,SAASC,0BAA0B,CAACC,UAAU,EAAE;EACnDA,UAAU,CAACC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAC5B,IAAGD,UAAU,EAAE;IACb,OAAOA,UAAU,IACf,yBAAyB,CAACE,IAAI,CAC5BF,UAAU,CAACC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAACE,IAAI,EAAE,CACxC,GACC,EAAE,GACF,oBAAoB;EAC1B;EAGJ,OAAO,oBAAoB;AAC7B;AAGF,OAAO,MAAMC,yBAAyB,GAAIC,KAAK,IAAK;EAClD,IAAIA,KAAK,EAAE;IACT,IAAI,8BAA8B,CAACH,IAAI,CAACG,KAAK,CAACF,IAAI,EAAE,CAAC,EAAE;MACrD,IAAIG,KAAK,GAAG,IAAIC,IAAI,EAAE;MACtB,IAAIC,WAAW,GAAGV,MAAM,CACtB,IAAIS,IAAI,CACND,KAAK,CAACG,WAAW,EAAE,GACjB,GAAG,IACFH,KAAK,CAACI,QAAQ,EAAE,GAAG,CAAC,CAAC,GACtB,GAAG,GACH,IAAIH,IAAI,CAACD,KAAK,CAACG,WAAW,EAAE,EAAEH,KAAK,CAACI,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAACC,OAAO,EAAE,CACnE,CACF;MACD,IAAIC,SAAS,GAAGP,KAAK,CAACQ,KAAK,CAAC,GAAG,CAAC;MAChC,IAAIC,QAAQ,GAAG,IAAIP,IAAI,CAAE,KAAIK,SAAS,CAAC,CAAC,CAAE,EAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;MAC7D,OAAOJ,WAAW,GAAGV,MAAM,CAACgB,QAAQ,CAAC,GACjCC,SAAS,GACT,yBAAyB;IAC/B,CAAC,MAAM;MACL,OAAO,qBAAqB;IAC9B;EACF;AACF,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAIX,KAAK,IAAK;EAC3C,IAAIA,KAAK,EAAE;IACT,IAAI,eAAe,CAACH,IAAI,CAACG,KAAK,CAAC,EAAE;MAC/B,OAAOU,SAAS;IAClB,CAAC,MAAM;MACL,OAAO,gBAAgB;IACzB;EACF,CAAC,MAAM;IACL,OAAOA,SAAS;EAClB;AACF,CAAC"},"metadata":{},"sourceType":"module"}